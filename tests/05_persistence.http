
### Delete Product ID with NO recommendations
DELETE http://{{HOST}}:{{PORT}}/product-composite/{{PROD_ID_NO_RECOMMENDATIONS}}
### SetUp Product ID with NO recommendations
POST http://{{HOST}}:{{PORT}}/product-composite
Content-Type: application/json

{"productId":{{PROD_ID_NO_RECOMMENDATIONS}}, "name":"product name A", "weight":100, "reviews":[
  {"reviewId":1,"author":"author 1","subject":"subject 1","content":"content 1"},
  {"reviewId":2,"author":"author 2","subject":"subject 2","content":"content 2"},
  {"reviewId":3,"author":"author 3","subject":"subject 3","content":"content 3"}]
}

### Delete Product ID with NO reviews
DELETE http://{{HOST}}:{{PORT}}/product-composite/{{PROD_ID_NO_REVIEWS}}
### SetUp Product ID with NO reviews
POST http://{{HOST}}:{{PORT}}/product-composite
Content-Type: application/json

{"productId":{{PROD_ID_NO_REVIEWS}}, "name":"product name B", "weight":200, "recommendations":[
  {"recommendationId":1,"author":"author 1","rate":1,"content":"content 1"},
  {"recommendationId":2,"author":"author 2","rate":2,"content":"content 2"},
  {"recommendationId":3,"author":"author 3","rate":3,"content":"content 3"}]
}

### Delete Product ID with recommendations and reviews
DELETE http://{{HOST}}:{{PORT}}/product-composite/{{PROD_ID_REVIEWS_RECOMMENDATIONS}}
### SetUp Product ID with recommendations and reviews
POST http://{{HOST}}:{{PORT}}/product-composite
Content-Type: application/json

{"productId":{{PROD_ID_REVIEWS_RECOMMENDATIONS}}, "name":"product name C", "weight":300, "recommendations":[
      {"recommendationId":1,"author":"author 1","rate":1,"content":"content 1"},
      {"recommendationId":2,"author":"author 2","rate":2,"content":"content 2"},
      {"recommendationId":3,"author":"author 3","rate":3,"content":"content 3"}
  ], "reviews":[
      {"reviewId":1,"author":"author 1","subject":"subject 1","content":"content 1"},
      {"reviewId":2,"author":"author 2","subject":"subject 2","content":"content 2"},
      {"reviewId":3,"author":"author 3","subject":"subject 3","content":"content 3"}
  ]
}


### Normal flow
GET http://{{HOST}}:{{PORT}}/product-composite/{{PROD_ID_REVIEWS_RECOMMENDATIONS}}
Accept: application/json

> {%
client.log("" + response.body);
client.test("Normal flow", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.recommendations.length === 3, "Wrong recommendations amount");
  client.assert(response.body.reviews.length === 3, "Wrong reviews amount");
});
%}


### Non-existing productId ($PROD_ID_NOT_FOUND) is Not found 404
GET http://{{HOST}}:{{PORT}}/product-composite/{{PROD_ID_NOT_FOUND}}
Accept: application/json

> {%
client.test("Non-existing productId", function() {
  client.assert(response.status === 404, "Response status is not 404");
  client.assert(response.body.message.startsWith("No product found for productId:", "Wrong answer"));
});
%}


### Verify productId ($PROD_ID_NO_RECOMMENDATIONS) with no recommendations
GET http://{{HOST}}:{{PORT}}/product-composite/{{PROD_ID_NO_RECOMMENDATIONS}}
Accept: application/json

> {%
client.test("productId with no recommendations", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.recommendations.length === 0, "Wrong recommendations amount");
  client.assert(response.body.reviews.length === 3, "Wrong reviews amount");
});
%}


### Verify productId ($PROD_ID_NO_REVIEWS) with no reviews
GET http://{{HOST}}:{{PORT}}/product-composite/{{PROD_ID_NO_REVIEWS}}
Accept: application/json

> {%
client.test("productId with no reviews", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.recommendations.length === 3, "Wrong recommendations amount");
  client.assert(response.body.reviews.length === 0, "Wrong reviews amount");
});
%}


### Verify productId which is out of range (-1) - 422 (Unprocessable Entity)
GET http://{{HOST}}:{{PORT}}/product-composite/-1
Accept: application/json

> {%
client.test("productId with invalid id (-1)", function() {
  client.assert(response.status === 422, "Response status is not 422");
  client.assert(response.body.message.startsWith("Invalid productId:", "Wrong answer"));
});
%}


### Verify productId which is not a number - 400 (Bad Request) means invalid format
GET http://{{HOST}}:{{PORT}}/product-composite/string
Accept: application/json

> {%
client.test("productId is not a number", function() {
  client.assert(response.status === 400, "Response status is not 400");
  client.assert(response.body.message.startsWith("Type mismatch", "Wrong answer"));
});
%}

### Verify access to Swagger and OpenAPI URLs - redirect
// @no-redirect
GET http://{{HOST}}:{{PORT}}/openapi/swagger-ui.html
Accept: application/json

> {%
client.test("Redirect to swagger UI", function() {
  client.assert(response.status === 302, "Response status is not 302");
});
%}

### Verify access to Swagger-config
GET http://{{HOST}}:{{PORT}}/openapi/webjars/swagger-ui/index.html?configUrl=/v3/api-docs/swagger-config
Accept: application/json

> {%
client.test("Swagger-config page access", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}

### Verify access to api-docs JSON
GET http://{{HOST}}:{{PORT}}/openapi/v3/api-docs
Accept: application/json

> {%
//console.log(response.body)
client.test("Reach JSON api-doc", function() {
  client.assert(response.status === 200, "Response status is not 200");
  client.assert(response.body.openapi==="3.0.1", "Wrong answer");
});
%}

### Verify access to api-docs YAML
GET http://{{HOST}}:{{PORT}}/openapi/v3/api-docs.yaml
Accept: application/vnd.oai.openapi

> {%
client.test("Reach YAML api-doc", function() {
  client.assert(response.status === 200, "Response status is not 200");
});
%}
